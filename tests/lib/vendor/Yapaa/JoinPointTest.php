<?php

/**
 * This file is part of the Yapaa library - Yet another PHP AOP approach
 *
 * Copyright (c) 2011 Tomáš Klapka (tomas@klapka.cz)
 *
 * For the full copyright and license information, please view
 * the file license.txt that was distributed with this source code.
 */

namespace Yapaa;

require_once __DIR__ . '/test_data.php';
require_once __DIR__ . '/../../../../lib/vendor/Yapaa/JoinPoint.php';
require_once __DIR__ . '/../../../../lib/vendor/Yapaa/RunkitWeaver.php';

/**
 * Test class for JoinPoint.
 * Generated by PHPUnit on 2011-12-27 at 16:40:44.
 */
class JoinPointTest extends \PHPUnit_Framework_TestCase {

    protected $joinPointMethod;
    protected $joinPointFunction;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->joinPointMethod = new JoinPointMethod('TestClass1', 'testClass1Method2');
        $this->joinPointFunction = new JoinPointFunction('test_function');
    }

    /**
     * @covers JoinPointMethod::getClassName
     */
    public function testGetClassName() {
        $this->assertEquals('TestClass1', $this->joinPointMethod->getClassName());
    }

    /**
     * @covers JointPointMethod::getMethodName
     */
    public function testGetMethodName() {
        $this->assertEquals('testClass1Method2', $this->joinPointMethod->getMethodName());
    }

    /**
     * @covers JointPointFunction::getFunctionName
     */
    public function testGetFunctionName() {
        $this->assertEquals('test_function', $this->joinPointFunction->getFunctionName());
    }

    public function testInternals() {
        $internal_override = (ini_get('runkit.internal_override') === '1');
        if (!$internal_override) {
            $this->setExpectedException('\Yapaa\YapaaException');
        }
        JoinPoint::includeInternals();
        $points = JoinPointFunction::findMatching('pow');
        $this->assertEquals(1, count($points));
    }

    /**
     * @covers JointPointFunction::findMatching
     * @covers JointPointMethod::findMatching
     */
    public function testFindMatching() {
        $points = JoinPointFunction::findMatching('*IDDQD*');
        $this->assertEquals(1, count($points));
        $this->assertEquals('hard_to_find_iddqd_function', strtolower($points[0]->getFunctionName()));
        $points = JoinPointFunction::findMatching('test_function');
        $this->assertEquals(1, count($points));
        $this->assertEquals('test_function', strtolower($points[0]->getFunctionName()));
        $points = JoinPointMethod::findMatching('*', '*IDKFA*');
        $this->assertEquals(1, count($points));
        $this->assertEquals('hard_to_find_IDKFA_method', $points[0]->getMethodName());
        $points = JoinPointMethod::findMatching('TestClass1', 'testClass1Method2');
        $this->assertEquals(1, count($points));
        $this->assertEquals('testClass1Method2', $points[0]->getMethodName());
        $points = JoinPointMethod::findMatching('TestClass1', 'test*');
        $this->assertEquals(2, count($points));
    }

    /**
     * @covers JointPointMethod::findMatching
     * @covers JointPointMethod::weave
     */
    public function testWeave() {
        $points = JoinPointMethod::findMatching('TestClass2', 'test*');
        $adviceCode = 'return "failed";';

        foreach ($points as $point) {
            $name = \Yapaa\IWeaver::PREFIX . $point->getMethodName() . \Yapaa\IWeaver::SUFIX;
            $this->assertFalse(method_exists('TestClass2', $name));
            $point->setAdviceCode($adviceCode);
            $point->weave();
            $this->assertEquals($name, $point->getOriginalFunctionName());
            $this->assertTrue(method_exists('TestClass2', $name));
        }
    }

}
