<?php

/**
 * This file is part of the Yapaa library - Yet another PHP AOP approach
 *
 * Copyright (c) 2011 Tomáš Klapka (tomas@klapka.cz)
 *
 * For the full copyright and license information, please view
 * the file license.txt that was distributed with this source code.
 */
require_once __DIR__.'/test_data.php';
require_once __DIR__.'/../../../../lib/vendor/Yapaa/RunkitWeaver.php';

/**
 * Test class for \Yapaa\RunkitWeaver.
 * Generated by PHPUnit on 2011-12-27 at 14:41:02.
 */
class RunkitWeaverTest extends \PHPUnit_Framework_TestCase {

    /**
     * @covers \Yapaa\RunkitWeaver::originalFunctionName
     */
    public function testOriginalFunctionName() {
        $name = 'test_function';
        $expected = \Yapaa\IWeaver::PREFIX . $name . \Yapaa\IWeaver::SUFIX;
        $this->assertEquals($expected, \Yapaa\RunkitWeaver::originalFunctionName($name));
        $name = 'test_method';
        $expected = \Yapaa\IWeaver::PREFIX . $name . \Yapaa\IWeaver::SUFIX;
        $this->assertEquals($expected, \Yapaa\RunkitWeaver::originalFunctionName($name));
    }

    /**
     * @covers \Yapaa\RunkitWeaver::weaveFunction
     * @covers \Yapaa\RunkitWeaver::isFunctionWeaved
     */
    public function testWeaveFunction() {
        $name = 'not_weaved';
        $this->assertFalse(\Yapaa\RunkitWeaver::isFunctionWeaved($name));
        $this->assertNotEquals("passed", $name('failed'));
        \Yapaa\RunkitWeaver::weaveFunction($name, 'return "passed";');
        $this->assertEquals("passed", $name('failed'));
        $this->assertTrue(\Yapaa\RunkitWeaver::isFunctionWeaved($name));
    }

    /**
     * @covers \Yapaa\RunkitWeaver::weaveMethod
     * @covers \Yapaa\RunkitWeaver::isMethodWeaved
     */
    public function testWeaveMethod() {
        $name = 'not_weaved';
        $class = 'TestClass';
        $obj = new $class();
        $this->assertFalse(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
        $this->assertNotEquals("passed", $obj->$name('failed'));
        \Yapaa\RunkitWeaver::weaveMethod($class, $name, 'return "passed";');
        $this->assertEquals("passed", $obj->$name('failed'));
        $this->assertTrue(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
    }

    /**
     * @covers \Yapaa\RunkitWeaver::weaveMethod
     * @covers \Yapaa\RunkitWeaver::isMethodWeaved
     */
    public function testWeaveStaticMethod() {
        $name = 'not_weaved_static';
        $class = 'TestClass';
        $this->assertFalse(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
        $this->assertNotEquals("passed", $class::$name('failed'));
        \Yapaa\RunkitWeaver::weaveMethod($class, $name, 'return "passed";');
        $this->assertEquals("passed", $class::$name('failed'));
        $this->assertTrue(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
    }

    /**
     * @covers \Yapaa\RunkitWeaver::isFunctionWeaved
     * @covers \Yapaa\RunkitWeaver::weaveFunction
     */
    public function testIsFunctionWeaved() {
        $name = 'test_function_weave';
        $this->assertFalse(\Yapaa\RunkitWeaver::isFunctionWeaved($name));
        \Yapaa\RunkitWeaver::weaveFunction($name, 'return NULL');
        $this->assertTrue(\Yapaa\RunkitWeaver::isFunctionWeaved($name));
    }

    /**
     * @covers \Yapaa\RunkitWeaver::isMethodWeaved
     * @covers \Yapaa\RunkitWeaver::weaveMethod
     */
    public function testIsMethodWeaved() {
        $class = 'TestClass';
        $name = 'test_method_weave';
        $this->assertFalse(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
        \Yapaa\RunkitWeaver::weaveMethod($class, $name, 'return NULL');
        $this->assertTrue(\Yapaa\RunkitWeaver::isMethodWeaved($class, $name));
    }

}
